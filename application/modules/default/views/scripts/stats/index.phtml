<?
$this->headScript()->appendFile("/public/ui/flot/jquery.flot.js");
$this->headScript()->appendFile("/public/ui/flot/jquery.flot.selection.js");
$id = isset($_GET['id']) ? $_GET['id'] : "";
	$_options = array("recipes" => "Sukurtų receptų skaičius (mėnesiais)", "users" => "Prisiregistravusių naujų nautotojų skaičius (mėnesiais)", "sessions" => "Virimų statistika", "styles" => "Sukurtų receptų skaičius pagal stilių", "cats" => "Sukurtų receptų skaičius pagal kategorijas", "abv" => "Išvirto alaus stiprumas", "ibu" => "Išvirto alaus kartumas", "locations" => "Nautotojų geografija");
?>
<div id="brewer_session_container" class="inner_container">
	<div class="inner_header">Statistika</div>
	<div style="margin-bottom: 5px;">
		Statistikos tipas:
		<select onchange="window.location=this.value">
			<?
			foreach ($_options as $key => $value) {
				$selected = ($id == $key) ? "selected" : "";
					?>
					<option value="?id=<?= $key; ?>" <?= $selected; ?>><?= $value ?></option>
					<?
					}
			?>
		</select>
	</div> 
	<div id="placeholder" style="width:800px;height:300px;"></div> 
	<div id="overview" style="margin-left:50px;margin-top:20px;width:700px;height:50px"></div> 
</div> 


<div id="placeholder" style="width:600px;height:300px;"></div> 
<div id="overview" style="margin-left:50px;margin-top:20px;width:400px;height:50px"></div> 






<script id="source"> 
	var stack = 1, bars = true, lines = false, steps = false;
	<?
	switch ($id) {
		case "sessions":
			?>
				var stack = 0, bars = true, lines = false, steps = true;
				var a=<?= $this->sessions_count; ?>;
				var d = [{label:"Išvirta - viso (l)",data:[],color:1},{label:"Išvirta - vidurkis(l)",data:[],color:2},{label:"Aludariai",data:[],color:3,lines: { show: true },yaxis: 2}];
				for (var i=0;i<a.length;i++) {
		    	    d[0].data.push([new Date(a[i].day).getTime(),a[i].total])
		    	    d[1].data.push([new Date(a[i].day).getTime(),a[i].avg])
		    	    d[2].data.push([new Date(a[i].day).getTime(),a[i].count])
				}
			
			
			<?
			break;

		case "recipes":
			?>
				var a=<?= $this->recipes_count; ?>;
				var d = [];
				for (var i=0;i<a.length;i++) {
		    	    d.push([new Date(a[i].day).getTime(),a[i].total])
		    	    
				}
				d=[d]
			<?
			break;
		case "users":
			?>
				var a=<?= $this->user_count; ?>;
				var d = [];
				var sum=0;
				for (var i=0;i<a.length;i++) {
					sum+=a[i].total
		    	    d.push([new Date(a[i].day).getTime(),sum])
				}
				d=[d]
			<?
			break;
		case "styles":
			?>
			var a=<?= $this->styles; ?>;
			var d = [];
			var total=0
			for (var i=0;i<a.length;i++) {
			    	  
			
				total+=a[i].total;
			}
			for (var i=0;i<a.length;i++) {
			    	  
				d[i]={label:a[i].style_name+" "+Math.round((a[i].total/total*100)*100)/100+" %",data:a[i].total/total*100};
			}
			   
			<?
			break;
		default:
			?>
				var a=<?= $this->recipes_count; ?>;
				var d = [];
			    for (var i=0;i<a.length;i++) {
			    	  
				    d.push([new Date(a[i].day).getTime(),a[i].total])
			    }
			    d=[d]
			<?
			break;
	}
	?>

	<?
	switch ($id) {
		default:
			?>
			function showTooltip(x, y, contents) {
		        $('<div id="tooltip">' + contents + '</div>').css( {
		            position: 'absolute',
		            display: 'none',
		            top: y + 5,
		            left: x + 5,
		            border: '1px solid #fdd',
		            padding: '2px',
		            'background-color': '#fee',
		            opacity: 0.80
		        }).appendTo("body").fadeIn(200);
		    }
		    function addNull(str) {
				if (String(str).length>1) {
					return str
				}else{
					return "0"+String(str)  
				}
		    }
		    function toDate(timeStamp) {
				var dt=new Date(Number(timeStamp))
				return dt.getFullYear()+"."+addNull(dt.getMonth()+1)+"."+addNull(dt.getDate())
		    }
		    var previousPoint = null;
		    $("#placeholder").bind("plothover", function (event, pos, item) {
		        $("#x").text(pos.x.toFixed(2));
		        $("#y").text(pos.y.toFixed(2));
		 
		        
				if (item) {
					if (previousPoint != item.datapoint) {
						previousPoint = item.datapoint;
		                    
						$("#tooltip").remove();
						var x = item.datapoint[0].toFixed(2),
						y = item.datapoint[1].toFixed(2);
		                    
						showTooltip(item.pageX+10, item.pageY-5,toDate(x)+" - "+Number(y));
					}
				}
				else {
					$("#tooltip").remove();
					previousPoint = null;            
				}
		        
		    });
			function weekendAreas(axes) {
		        var markings = [];
		        var d = new Date(axes.xaxis.min);
		        // go to the first Saturday
		        d.setUTCDate(d.getUTCDate() - ((d.getUTCDay() + 1) % 7))
		        d.setUTCSeconds(0);
		        d.setUTCMinutes(0);
		        d.setUTCHours(0);
		        var i = d.getTime();
		        do {
		            // when we don't set yaxis, the rectangle automatically
		            // extends to infinity upwards and downwards
		            markings.push({ xaxis: { from: i, to: i + 2 * 24 * 60 * 60 * 1000 } });
		            i += 7 * 24 * 60 * 60 * 1000;
		        } while (i < axes.xaxis.max);
		 
		        return markings;
		    }
		   
			$(function () {
		  
		    
		   
		    
		   
				var options = {
					xaxis: { mode: "time", minTickSize: [1, "day"]},
					selection: { mode: "x" },
					grid: { markings: weekendAreas, hoverable: true, clickable: true },
					legend: { position: 'nw' },
					timeformat: "%y.%m.%d",
					monthNames: ["saus", "vas", "kov", "bal", "geg", "bir", "liep", "rūgp", "rugs", "spal", "lapkr", "gruod"],
					stack:stack,
		         
		              
		        
				};
		    
				var plot = $.plot($("#placeholder"), d, options);
		    
				var overview = $.plot($("#overview"), d, {
					series: {
						lines: { show: true, lineWidth: 1 },
						shadowSize: 0
					},
					legend:{show:false},
					xaxis: { ticks: [], mode: "time" },
					yaxis: { ticks: [], min: 0, autoscaleMargin: 0.1 },
					selection: { mode: "x" }
				});
		 
				// now connect the two
		    
				$("#placeholder").bind("plotselected", function (event, ranges) {
					// do the zooming
					plot = $.plot($("#placeholder"), d,
					$.extend(true, {}, options, {
						xaxis: { min: ranges.xaxis.from, max: ranges.xaxis.to }
					}));
		 
					// don't fire event on the overview to prevent eternal loop
					overview.setSelection(ranges, true);
				});
		    
				$("#overview").bind("plotselected", function (event, ranges) {
					plot.setSelection(ranges);
				});
			});
			<?
			break;
		case "styles":
			?>
			$.plot($("#placeholder"), d,
			{
		        series: {
		            pie: {
		                show: true
		            }
		        },
		        grid: {
		            hoverable: true,
		            clickable: true
		        }
			});
		<? break;
} ?>
</script> 